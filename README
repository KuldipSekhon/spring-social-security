For a simple "Hello World" app demonstrating spring-social-security see:

https://github.com/socialsignin/spring-social-security-demo

About Spring-Social-Security:

Many applications using Spring Security for authentication will need to:

    Ask users to sign up using a username and password.
    Create their own user details store and data access objects
    Provide account management (eg. forgotten password functionality)
    Provide access control for protected resources

For applications which already use spring-social to connect with external authenticated apis (eg. Facebook, Twitter)
,SocialSignIn's spring-social-security module removes these authentication concerns by delegating authentication
in Spring Security via spring-social to the third party api. Authenticating your website users via spring-social api
providers means:

    No need for users to remember another password for another site.
    No need for developers to create their own user details store, as the store used by spring-social is used instead.
    No need for developers to provide account management as this is provided by the third party api.
    SpringSocialSecurity can be easily customised to delegate access control decisions to third party api.

The spring-social-security module includes:

    SpringSocialSecurityUserDetailsService :    

        Enables existing spring-social user store to be used as your user details service.

    SpringSocialSecuritySignInService:  

        Plugs into spring-social framework, passing third party authentication details to spring security via 
        SpringSocialSecurityAuthenticationFilter

    SpringSocialSecurityAuthenticationFilter : 

        Plugs into spring-security framework, receives authentication details from third party using 
        SpringSocialSecuritySignInService

    SpringSocialSecurityConnectionSignUp :  

        Allows for implicit sign up, generating a username for your app from external provider username

    SpringSocialSecuritySignUpController:  

        Allows for explicit sign up, allowing users to choose a username for your site that is associated with their third party


To delegate the authentication for your app to Spring-Social, a number of spring beans must be set up.

To use the default beans/implementations/configuration, simply component scan:

    <context:component-scan base-package="org.socialsignin.springframework.social.security" />

and register springSocialSecurityAuthenticationFilter as a custom filter in place of FORM_LOGIN_FILTER.

    <security:custom-filter position="FORM_LOGIN_FILTER" ref="springSocialSecurityAuthenticationFilter" />

Also configure the entry-point for your app's authentication to be the page from which users can login/connect
with a Spring-Social provider (usually a page with a form submit to ProviderSignInController or ConnectController), and
setup an environment property for "socialsignin.signUpView" to reference the view name of your app's
signup page where a username can be chosen if a user is registering for the first time.  This page should
contain a form with a "userId" parameter posted to the url "/signup" which is handled by SpringSocialSecuritySignUpController

For example:

<bean id="springSocialSecurityEntryPoint"
  class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
 <property name="loginFormUrl" value="/oauthlogin.jsp"/>
</bean>

<security:http use-expressions="true"  entry-point-ref="springSocialSecurityEntryPoint" ....

As an alternative to component-scanning for the default implementations, you have the option to register your
own beans/provide custom implementations.

The classes which are registered as beans by default through component-scanning are:

SpringSocialSecurityAuthenticationFilter (required)

SpringSocialSecuritySignInService (required)

SpringSocialSecurityUserDetailsService (required)

SimpleUserAuthoritiesService (one implementation of UserAuthoritiesService is required)

SpringSocialSecuritySignUpController (optional - for handling UI for creating new local accounts - alternative controllers could
be used instead)

SpringSocialSecurityConnectionSignUp (optional - for implictly creating new local accounts.  If used, the SpringSocialSecurityJdbcUsersConnectionRepository
must be used in place of standard JdbcUsersConnectionRepository to workaround and issue with JdbcUsersConnectionRepository
not handling null return values from ConnectionSignUp's properly)

